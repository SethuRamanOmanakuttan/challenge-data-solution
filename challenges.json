 {
    "schedule": [
        {
            "day": 1,
            "week": "Week 1: Solidity Fundamentals",
            "contractName": "ClickCounter.sol",
            "conceptsTaught": [
                "Basic Solidity syntax",
                "Variables (uint)",
                "Increment/Decrement functions"
            ],
            "exampleApplication": "Let's build a simple counter! Imagine a digital clicker. You'll create a 'function' named `click()`. Each time someone calls this function, a number stored in the contract (a 'variable') will increase by one. You'll learn how to declare a variable to hold a number (an `uint`) and create functions to change it (increment/decrement). This is the very first step in making interactive smart contracts, showing how to store and modify data.",
            "logicalProgression": "Foundational syntax and basic contract structure.",
            "youtubeLink": "https://youtu.be/7AoTBeDrFgk",
            "solutionLink": "https://www.notion.so/builder-hub/ClickCounter-Contract-1c15720a23ef8001ac8fd21470d611c5"
        },
        {
            "day": 2,
            "week": "Week 1: Solidity Fundamentals",
            "contractName": "SaveMyName.sol",
            "conceptsTaught": [
                "State variables (string, bool)",
                "Storage and retrieval"
            ],
            "exampleApplication": "Imagine creating a basic profile. You'll make a contract where users can save their name (like 'Alice') and a short bio (like 'I build dApps'). You'll learn how to store text (using `string`) on the blockchain. Then, you'll create functions to let users save and retrieve this information. This demonstrates how to store and retrieve data on the blockchain, essential for building profiles or user data storage.",
            "logicalProgression": "Introduces data types and state management.",
            "youtubeLink": "https://youtu.be/jMxpX_OiW4g",
            "solutionLink": "https://builder-hub.notion.site/SaveMyName-Contract-1c15720a23ef801a8a42eedbae041ea9"
        },
        {
            "day": 3,
            "week": "Week 1: Solidity Fundamentals",
            "contractName": "PollStation.sol",
            "conceptsTaught": [
                "Arrays (uint[])",
                "Mappings (mapping(address => uint))",
                "Simple voting logic"
            ],
            "exampleApplication": "Let's build a simple polling station! Users will be able to vote for their favorite candidates. You'll use lists (arrays, `uint[]`) to store candidate details. You'll also create a system (mappings, `mapping(address => uint)`) to remember who (their `address`) voted for which candidate. Think of it as a digital voting booth. This teaches you how to manage data in a structured way.",
            "logicalProgression": "Introduces complex data structures (arrays, mappings) and logic.",
            "youtubeLink": "https://youtu.be/uBre8NtNKxY",
            "solutionLink": "https://www.notion.so/builder-hub/PollStation-Contract-1c25720a23ef802c9d9be066debb9bbd"
        },
        {
            "day": 4,
            "week": "Week 1: Solidity Fundamentals",
            "contractName": "AuctionHouse.sol",
            "conceptsTaught": [
                "if/else statements",
                "Time (block.timestamp)",
                "Basic bidding"
            ],
            "exampleApplication": "Create a basic auction! Users can bid on an item, and the highest bidder wins when time runs out. You'll use 'if/else' to decide who wins based on the highest bid and track time using the blockchain's clock (`block.timestamp`). This is like a simple version of eBay on the blockchain, showing how to control logic based on conditions and time.",
            "logicalProgression": "Adds control flow and time management.",
            "youtubeLink": "https://youtu.be/OI9x4G6Tu-k",
            "solutionLink": "https://builder-hub.notion.site/AuctionHouse-Contract-1c35720a23ef80198952efbbe2554608?pvs=4"
        },
        {
            "day": 5,
            "week": "Week 1: Solidity Fundamentals",
            "contractName": "AdminOnly.sol",
            "conceptsTaught": [
                "modifier",
                "msg.sender for ownership",
                "Basic access control"
            ],
            "exampleApplication": "Build a contract that simulates a treasure chest controlled by an owner. The owner can add treasure, approve withdrawals for specific users, and even withdraw treasure themselves. Other users can attempt to withdraw, but only if the owner has given them an allowance and they haven't withdrawn before. The owner can also reset withdrawal statuses and transfer ownership of the treasure chest. This demonstrates how to create a contract with restricted access using a 'modifier' and `msg.sender`, similar to how only an admin can perform certain actions in a game or application.",
            "logicalProgression": "Introduces basic access control patterns.",
            "youtubeLink": "https://youtu.be/MCz9RrQfpj8",
            "solutionLink": "https://builder-hub.notion.site/Admin-Only-Contract-1ca5720a23ef804cbd61dc3ca3d380df?pvs=4"
        },
        {
            "day": 6,
            "week": "Week 1: Solidity Fundamentals",
            "contractName": "EtherPiggyBank.sol",
            "conceptsTaught": [
                "msg.sender",
                "address",
                "Ether balance",
                "Deposits and withdrawals"
            ],
            "exampleApplication": "Let's make a digital piggy bank! Users can deposit and withdraw Ether (the cryptocurrency). You'll learn how to manage balances (using `address` to identify users) and track who sent Ether (using `msg.sender`). It's like a simple bank account on the blockchain, demonstrating how to handle Ether and user addresses.",
            "logicalProgression": "Applies address type, msg.sender, and Ether handling.",
            "youtubeLink": "https://youtu.be/sxWujOuZRuw",
            "solutionLink": "https://builder-hub.notion.site/The-Ether-Piggy-Bank-1cd5720a23ef802dbd15e2a7b3a7f3d2?pvs=4"
        },
        {
            "day": 7,
            "week": "Week 1: Solidity Fundamentals",
            "contractName": "SimpleIOU.sol",
            "conceptsTaught": [
                "address",
                "token transfer",
                "payable for gas",
                "validation (require)"
            ],
            "exampleApplication": "Build a simple IOU contract for a private group of friends. Each user can deposit ETH, track personal balances, log who owes who, and settle debts — all on-chain. You’ll learn how to accept real Ether using `payable`, transfer funds between addresses, and use nested mappings to represent relationships like 'Alice owes Bob'. This contract mirrors real-world borrowing and lending, and teaches you how to model those interactions in Solidity.",
            "logicalProgression": "Extends personal balance tracking by introducing two-way interactions — debt recording, repayments, and actual ETH movement using `transfer` and `call`.",
            "youtubeLink": "https://youtu.be/J0XWaNMFN-c",
            "solutionLink": "https://builder-hub.notion.site/Simple-IOU-Contract-1ce5720a23ef80acbcb9dda43b5f803f?pvs=4"
        },
        {
            "day": 8,
            "week": "Week 2: Intermediate Solidity",
            "contractName": "TipJar.sol",
            "conceptsTaught": [
                "conversion",
                "denominations",
                "payable"
            ],
            "exampleApplication": "Build a multi-currency digital tip jar! Users can send Ether directly or simulate tips in foreign currencies like USD or EUR. You'll learn how to manage currency conversion, handle Ether payments using `payable` and `msg.value`, and keep track of individual contributions. Think of it like an advanced version of a 'Buy Me a Coffee' button — but smarter, more global, and Solidity-powered.",
            "logicalProgression": "Expands on basic Ether transfers by introducing access control, tracking contributions, and simulating real-world currency handling — preparing you for more complex contract logic.",
            "youtubeLink": "https://youtu.be/zidzGRim__I",
            "solutionLink": "https://builder-hub.notion.site/TipJar-Contract-1cf5720a23ef80e2acf8ebd862a85f27?pvs=4"
        },
        {
            "day": 9,
            "week": "Week 2: Intermediate Solidity",
            "contractName": "SmartCalculator.sol",
            "conceptsTaught": [
                "Calling functions of another contract",
                "address casting",
                "imports"
            ],
            "exampleApplication": "Build a contract that uses another contract to do calculations. You'll learn how contracts can talk to each other by calling functions of other contracts (using `address casting`). It's like having one app ask another app to do some math, showing how to interact with other contracts.",
            "logicalProgression": "Introduces inter-contract communication.",
            "youtubeLink": "https://youtu.be/AUA6yZBabJ0",
            "solutionLink": "https://builder-hub.notion.site/Smart-Calculator-1d05720a23ef803a86e3e16d534b51ab?pvs=4"
        },
        {
            "day": 10,
            "week": "Week 2: Intermediate Solidity",
            "contractName": "ActivityTracker.sol",
            "conceptsTaught": [
                    "Events",
                    "logging data",
                    "Indexed parameters",
                    "emitting events"
                ],
            "exampleApplication": "Create a smart contract that logs user workouts and emits events when fitness goals are reached — like 10 workouts in a week or 500 total minutes. Users log each session (type, duration, calories), and the contract tracks progress. Events use *indexed* parameters to make it easy for frontends or off-chain tools to filter logs by user and milestone — just like a backend for a decentralized fitness tracker with achievement unlocks.",
            "logicalProgression": "Introduces event logging for debugging and tracking.",
            "youtubeLink": "https://youtu.be/QgtW7mwRPC0",
            "solutionLink": "https://builder-hub.notion.site/ActivityTracker-Contract-1d15720a23ef8065a8d4f1ccd61800e0?pvs=4"
        },
        {
            "day": 11,
            "week": "Week 2: Intermediate Solidity",
            "contractName": "MasterKey.sol",
            "conceptsTaught": [
                "Ownable pattern",
                "inheritance",
                "robust access control"
            ],
            "exampleApplication": "Build a secure Vault contract that only the owner (master key holder) can control. You'll split your logic into two parts: a reusable 'Ownable' base contract and a 'VaultMaster' contract that inherits from it. Only the owner can withdraw funds or transfer ownership. This shows how to use Solidity's inheritance model to write clean, reusable access control patterns — just like in real-world production contracts. It's like building a secure digital safe where only the master key holder can access or delegate control.",
            "logicalProgression": "Builds on basic ownership with a modular, inheritance-based access control pattern.",
            "youtubeLink": "https://youtu.be/irc--Pts8zw",
            "solutionLink": "https://builder-hub.notion.site/Masterkey-Contract-1d25720a23ef803db49dfc8693959f3c?pvs=4"
        },
        {
            "day": 12,
            "week": "Week 2: Intermediate Solidity",
            "contractName": "MyFirstToken.sol",
            "conceptsTaught": [
                "ERC20 interface",
                "totalSupply",
                "balanceOf",
                "transfer",
                "token basics"
            ],
            "exampleApplication": "Let's make your own digital currency! You'll create a basic token that can be transferred between users, implementing the ERC20 standard. It's like creating your own in-game money, demonstrating how to create and manage tokens.",
            "logicalProgression": "Introduces standardized token interfaces.",
            "youtubeLink": "https://youtu.be/59b60LEo1Lo",
            "solutionLink": "https://builder-hub.notion.site/MyFirstToken-Contract-1d35720a23ef80b2b190c3b122c2290f?pvs=4"
        },
        {
            "day": 13,
            "week": "Week 2: Intermediate Solidity",
            "contractName": "PreorderTokens.sol",
            "conceptsTaught": [
                "Selling tokens for Ether",
                "rate calculations",
                "token economics"
            ],
            "exampleApplication": "Build a contract to sell your tokens for Ether. You'll learn how to set a price and manage sales, demonstrating token economics. It's like a pre-sale for your digital currency, showing how to sell tokens for Ether.",
            "logicalProgression": "Applies ERC20 concepts to a real-world scenario.",
            "youtubeLink": "https://youtu.be/P8qmIlSLOLA",
            "solutionLink": "https://builder-hub.notion.site/PreorderTokens-1d45720a23ef80878624e2c98aab1552?pvs=4"
        },
        {
            "day": 14,
            "week": "Week 3: Advanced Solidity",
            "contractName": "SafeDepositBox.sol",
            "conceptsTaught": [
                "Interfaces",
                "Abstraction",
                "Ownership Transfer",
                "Contract-to-contract interaction"
            ],
            "exampleApplication": "Build a smart bank that offers different types of deposit boxes — basic, premium, time-locked, etc. Each box follows a common interface and supports ownership transfer. A central VaultManager contract interacts with all deposit boxes in a unified way, letting users store secrets and transfer ownership like handing over the key to a digital locker. This teaches interface design, modularity, and how contracts communicate with each other safely.",
            "logicalProgression": "Extends ownership and access control by introducing standardized interaction between modular contracts and enabling transferable access through interfaces.",
            "youtubeLink": "https://youtu.be/cqZ9gBj5S-A",
            "solutionLink": "https://builder-hub.notion.site/SafeDeposit-contract-1d55720a23ef80c1b2d0ebccd0fd594d?pvs=4"
        },
        {
            "day": 15,
            "week": "Week 3: Advanced Solidity",
            "contractName": "GasSaver.sol",
            "conceptsTaught": [
                "Gas optimization",
                "Efficient data locations",
                "Calldata vs memory",
                "Minimizing storage writes"
            ],
            "exampleApplication": "Build a simple voting system where users can vote on proposals. Your challenge is to make it as gas-efficient as possible. Optimize how you store voter data, handle input parameters, and design functions. You'll learn how `calldata`, `memory`, and `storage` affect gas usage and discover small changes that lead to big savings. It's like designing a voting machine that runs faster and cheaper without losing accuracy.",
            "logicalProgression": "Applies earlier knowledge of storage by challenging learners to minimize gas costs in a real-world contract scenario.",
            "youtubeLink": "https://youtu.be/AeVctT0E61s",
            "solutionLink": "https://builder-hub.notion.site/Gas-Efficient-Voting-1d65720a23ef80dca7dcee996bbe510a?pvs=4"
        },
        {
            "day": 16,
            "week": "Week 3: Advanced Solidity",
            "contractName": "PluginStore.sol",
            "conceptsTaught": [
                "delegatecall",
                "code execution context",
                "libraries"
            ],
            "exampleApplication": "Build a modular profile system for a Web3 game. The core contract stores each player's basic profile (like name and avatar), but players can activate optional 'plugins' to add extra features like achievements, inventory management, battle stats, or social interactions. Each plugin is a separate contract with its own logic, and the main contract uses `delegatecall` to execute plugin functions while keeping all data in the core profile. This allows developers to add or upgrade features without redeploying the main contract—just like installing new add-ons in a game. You'll learn how to use `delegatecall` safely, manage execution context, and organize external logic in a modular way.",
            "logicalProgression": "Introduces advanced execution control.",
            "youtubeLink": "https://youtu.be/3j-SrLl412o",
            "solutionLink": "https://builder-hub.notion.site/PluginStore-Contract-1d75720a23ef803693fafcd0f7fdb162?pvs=4"
        },
        {
            "day": 17,
            "week": "Week 3: Advanced Solidity",
            "contractName": "UpgradeHub.sol",
            "conceptsTaught": [
                "Upgradeable contracts",
                "proxy pattern",
                "delegate call for upgrades"
            ],
            "exampleApplication": "Build an upgradeable subscription manager for a SaaS-like dApp. The proxy contract stores user subscription info (like plans, renewals, and expiry dates), while the logic for managing subscriptions—adding plans, upgrading users, pausing accounts—lives in an external logic contract. When it's time to add new features or fix bugs, you simply deploy a new logic contract and point the proxy to it using `delegatecall`, without migrating any data. This simulates how real-world apps push updates without asking users to reinstall. You'll learn how to architect upgrade-safe contracts using the proxy pattern and `delegatecall`, separating storage from logic for long-term maintainability.",
            "logicalProgression": "Applies delegatecall to contract upgrades.",
            "youtubeLink": "https://youtu.be/4AXyPg4GwHU",
            "solutionLink": "https://builder-hub.notion.site/UpgradeHub-1d85720a23ef80e59a26c747bdf1d968?pvs=4"
        },
        {
            "day": 18,
            "week": "Week 3: Advanced Solidity",
            "contractName": "WeatherOracle.sol",
            "conceptsTaught": [
                "Interacting with oracles",
                "fetching off-chain data"
            ],
            "exampleApplication": "Build a smart contract that retrieves live weather data using an oracle like Chainlink. You'll create a decentralized crop insurance contract where farmers can claim insurance if rainfall drops below a certain threshold during the growing season. Since the Ethereum blockchain can't access real-world data on its own, you'll use an oracle to fetch off-chain weather information and trigger payouts automatically. This project demonstrates how to securely integrate external data into your contract logic and highlights the power of real-world connectivity in smart contracts.",
            "logicalProgression": "Introduces external data integration.",
            "youtubeLink":"https://youtu.be/FnTUo_WWSTg",
            "solutionLink":"https://builder-hub.notion.site/Oracle-Contract-1d95720a23ef801da5afebc5873bcbf5?pvs=4"
        },
        {
            "day": 19,
            "week": "Week 3: Advanced Solidity",
            "contractName": "SignThis.sol",
            "conceptsTaught": [
                "ecrecover",
                "verifying signatures",
                "basic authentication"
            ],
            "exampleApplication": "Build a secure signature-based entry system for a private Web3 event, like a conference, workshop, or token-gated meetup. Instead of storing an on-chain whitelist of attendees, your backend or event organizer signs a message for each approved guest. When attendees arrive, they submit their signed message to the smart contract to prove they were invited. The contract uses `ecrecover` to verify the signature on-chain, confirming their identity without needing any prior on-chain registration. This pattern drastically reduces gas costs, keeps the contract lightweight, and mirrors how many real-world events handle off-chain approvals with on-chain validation — a practical Web3 authentication flow.",
            "logicalProgression": "Introduces cryptographic authentication.",
            "youtubeLink": "https://youtu.be/delfyPTbHY8",
            "solutionLink": "https://builder-hub.notion.site/SignThis-Contract-1da5720a23ef80d69ae9c1559ba48a82?pvs=4"
        },
        {
            "day": 20,
            "week": "Week 3: Advanced Solidity",
            "contractName": "FortKnox.sol",
            "conceptsTaught": [
                "Reentrancy attacks",
                "nonReentrant modifier",
                "security best practices"
            ],
            "exampleApplication": "Build a secure digital vault where users can deposit and withdraw tokenized gold (or any valuable asset), ensuring it's protected from reentrancy attacks. Imagine you're creating a decentralized version of Fort Knox — users lock up tokenized gold, and can later withdraw it. But just like a real vault, this contract must prevent attackers from repeatedly triggering the withdrawal logic before the balance updates. You'll implement the `nonReentrant` modifier to block reentry attempts, and follow Solidity security best practices to lock down your contract. This project shows how a seemingly simple withdrawal function can become a vulnerability — and how to defend it properly.",
            "logicalProgression": "Introduces critical security concepts.",
            "youtubeLink": "https://youtu.be/Q9oEHYQGQI4",
            "solutionLink": "https://builder-hub.notion.site/FortKnox-Contract-1db5720a23ef80a4a303e3f1d63f8f3a?pvs=4"

        },
        {
            "day": 21,
            "week": "Week 4: Real-World Applications",
            "contractName": "SimpleNFT.sol",
            "conceptsTaught": [
                "ERC721 basics",
                "minting NFTs",
                "metadata storage"
            ],
            "exampleApplication": "Create your own digital collectibles (NFTs)! You'll learn how to make unique digital items by implementing the ERC721 standard and storing metadata. It's like creating digital trading cards, demonstrating NFT creation.",
            "logicalProgression": "Introduces NFT standards.",
            "youtubeLink": "https://www.youtube.com/watch?v=DdvrGf5Rg4Q&t=2742s",
            "solutionLink": "https://builder-hub.notion.site/SimpleNFT-1dc5720a23ef807da46fd1f75523bbb9?pvs=4"
        },
        {
            "day": 22,
            "week": "Week 4: Real-World Applications",
            "contractName": "DecentralizedLottery.sol",
            "conceptsTaught": [
                "Chainlink VRF",
                "random number generation",
                "lottery logic"
            ],
            "exampleApplication": "Build a fair and random lottery! You'll learn how to use external services like Chainlink VRF to generate random numbers. It's like a lottery on the blockchain, demonstrating how to use external randomness.",
            "logicalProgression": "Applies external data and randomness to a practical application.",
            "solutionLink":"https://builder-hub.notion.site/DecentralisedLottery-contract-1dd5720a23ef8030ab23ee0d8b2c2c2d?pvs=4",
            "youtubeLink":"https://youtu.be/IciiaXNIscg"
        },
        {
            "day": 23,
            "week": "Week 4: Real-World Applications",
            "contractName": "LendingPool.sol",
            "conceptsTaught": [
                "Lending/borrowing",
                "interest calculations",
                "collateral"
            ],
            "exampleApplication": "Build a system for lending and borrowing digital assets. You'll learn how to calculate interest and manage collateral, demonstrating core DeFi concepts. It's like a digital bank for crypto, showing how to create lending and borrowing platforms.",
            "logicalProgression": "Introduces core DeFi concepts.",
            "solutionLink":"https://builder-hub.notion.site/LendingPool-Contract-1de5720a23ef80b69930c481a98072df?pvs=4",
            "youtubeLink":"https://youtu.be/lnAFa73apAE"
        },
        {
            "day": 24,
            "week": "Week 4: Real-World Applications",
            "contractName": "DecentralizedEscrow.sol",
            "conceptsTaught": [
                "Escrow service",
                "conditional payments",
                "dispute resolution"
            ],
            "exampleApplication": "Build a secure system for holding funds until conditions are met. You'll learn how to manage payments and handle disputes. It's like a digital middleman for secure transactions, demonstrating secure conditional payments.",
            "logicalProgression": "Focuses on secure, conditional transactions.",
            "youtubeLink":"https://youtu.be/Ar6AR6I-j-s",
            "solutionLink":"https://builder-hub.notion.site/DecentraliseEscrow-Contract-1de5720a23ef8007a888eca6b48df76f?pvs=4"
        },
        {
            "day": 25,
            "week": "Week 4: Real-World Applications",
            "contractName": "AutomatedMarketMaker.sol",
            "conceptsTaught": [
                "AMM logic",
                "constant product formula",
                "liquidity pools"
            ],
            "exampleApplication": "Build a system for trading tokens automatically. You'll learn how to create liquidity pools and implement the constant product formula, demonstrating AMM logic. It's like a digital exchange for tokens, showing how to create automated markets.",
            "logicalProgression": "Introduces advanced DeFi with AMMs.",
            "youtubeLink": "https://youtu.be/xcaz8XQmtE8",
            "solutionLink": "https://builder-hub.notion.site/Automated-Market-Maker-1df5720a23ef807cac40e0ddc4e22224?pvs=4"
        },
        {
            "day": 26,
            "week": "Week 4: Real-World Applications",
            "contractName": "NFTMarketplace.sol",
            "conceptsTaught": [
                "NFT marketplace",
                "listing/buying/selling",
                "royalties"
            ],
            "exampleApplication": "Build a marketplace for buying and selling NFTs. You'll learn how to manage listings and royalties, demonstrating NFT trading. It's like a digital store for collectibles, showing how to create NFT marketplaces.",
            "logicalProgression": "Applies NFT standards to a marketplace.",
            "youtubeLink":"https://youtu.be/kNIzxWTi89g",
            "solutionLink":"https://builder-hub.notion.site/NFT-Marketplace-1df5720a23ef8040b753eacf7bd9beb4?pvs=4"
        },
        {
            "day": 27,
            "week": "Week 4: Real-World Applications",
            "contractName": "YieldFarming.sol",
            "conceptsTaught": [
                "Yield farming",
                "staking",
                "reward distribution"
            ],
            "exampleApplication": "Build a system for earning rewards by staking tokens. You'll learn how to distribute rewards, demonstrating yield farming. It's like a digital savings account with interest, showing how to create yield farming platforms.",
            "logicalProgression": "Builds on AMMs with yield farming.",
            "youtubeLink":"",
            "solutionLink":"https://builder-hub.notion.site/YieldFarming-Contract-1e25720a23ef8046ba76fcacffc66864?pvs=4"
        },
        {
            "day": 28,
            "week": "Week 4: Real-World Applications",
            "contractName": "DecentralizedGovernance.sol",
            "conceptsTaught": [
                "DAO structure",
                "voting",
                "token-based governance"
            ],
            "exampleApplication": "Build a system for voting on proposals. You'll learn how to create a digital organization where members can vote, demonstrating decentralized governance. It's like a digital democracy, showing how to create DAOs.",
            "logicalProgression": "Introduces decentralized governance.",
            "youtubeLink":"https://youtu.be/SoWNluca-Bk",
            "solutionLink":"https://builder-hub.notion.site/DecentralisedGovernance-Contract-1e25720a23ef8014a8caf30dca28fb9b?pvs=4"
        },
        {
            "day": 29,
            "week": "Week 4: Real-World Applications.sol",
            "contractName": "Stablecoin.sol",
            "conceptsTaught": [
                "Stablecoin implementation",
                "peg mechanisms",
                "price stability"
            ],
            "exampleApplication": "Build a digital currency that maintains a stable value. You'll learn how to keep the price steady using peg mechanisms, demonstrating stablecoin mechanics. It's like a digital dollar, showing how to create stablecoins.",
            "logicalProgression": "Expands on DeFi with stablecoin mechanics."
        },
        {
            "day": 30,
            "week": "Week 4: Real-World Applications",
            "contractName": "MiniDex.sol",
            "conceptsTaught": [
                "Minimal decentralized exchange",
                "token swaps",
                "liquidity pools"
            ],
            "exampleApplication": "Build a simple exchange for trading tokens. You'll learn how to create a digital marketplace using token swaps and liquidity pools. It's like a mini version of a stock exchange, demonstrating how to create decentralized exchanges.",
            "logicalProgression": "Combines many DeFi concepts into a practical application."
        }
    ]
}
