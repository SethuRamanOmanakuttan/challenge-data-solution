{
  "schedule": [
    {
      "day": 1,
      "week": "Week 1: Solidity Fundamentals",
      "contractName": "ClickCounter.sol",
      "conceptsTaught": ["Basic Solidity syntax", "Variables (uint)", "Increment/Decrement functions"],
      "exampleApplication": "Let's build a simple counter! Imagine a digital clicker. You'll create a 'function' named `click()`. Each time someone calls this function, a number stored in the contract (a 'variable') will increase by one. You'll learn how to declare a variable to hold a number (an `uint`) and create functions to change it (increment/decrement). This is the very first step in making interactive smart contracts, showing how to store and modify data.",
      "logicalProgression": "Foundational syntax and basic contract structure.",
      "youtubeLink": "https://youtu.be/7AoTBeDrFgk",
      "solutionLink": "https://www.notion.so/builder-hub/ClickCounter-Contract-1c15720a23ef8001ac8fd21470d611c5"
    },
    {
      "day": 2,
      "week": "Week 1: Solidity Fundamentals",
      "contractName": "SaveMyName.sol",
      "conceptsTaught": ["State variables (string, bool)", "Storage and retrieval"],
      "exampleApplication": "Imagine creating a basic profile. You'll make a contract where users can save their name (like 'Alice') and a short bio (like 'I build dApps'). You'll learn how to store text (using `string`) on the blockchain. Then, you'll create functions to let users save and retrieve this information. This demonstrates how to store and retrieve data on the blockchain, essential for building profiles or user data storage.",
      "logicalProgression": "Introduces data types and state management."
    },
    {
      "day": 3,
      "week": "Week 1: Solidity Fundamentals",
      "contractName": "PollStation.sol",
      "conceptsTaught": ["Arrays (uint[])", "Mappings (mapping(address => uint))", "Simple voting logic"],
      "exampleApplication": "Let's build a simple polling station! Users will be able to vote for their favorite candidates. You'll use lists (arrays, `uint[]`) to store candidate details. You'll also create a system (mappings, `mapping(address => uint)`) to remember who (their `address`) voted for which candidate. Think of it as a digital voting booth. This teaches you how to manage data in a structured way.",
      "logicalProgression": "Introduces complex data structures (arrays, mappings) and logic."
    },
    {
      "day": 4,
      "week": "Week 1: Solidity Fundamentals",
      "contractName": "AuctionHouse.sol",
      "conceptsTaught": ["if/else statements", "Time (block.timestamp)", "Basic bidding"],
      "exampleApplication": "Create a basic auction! Users can bid on an item, and the highest bidder wins when time runs out. You'll use 'if/else' to decide who wins based on the highest bid and track time using the blockchain's clock (`block.timestamp`). This is like a simple version of eBay on the blockchain, showing how to control logic based on conditions and time.",
      "logicalProgression": "Adds control flow and time management."
    },
    {
      "day": 5,
      "week": "Week 1: Solidity Fundamentals",
      "contractName": "AdminOnly.sol",
      "conceptsTaught": ["modifier", "msg.sender for ownership", "Basic access control"],
      "exampleApplication": "Build a contract that simulates a treasure chest controlled by an owner. The owner can add treasure, approve withdrawals for specific users, and even withdraw treasure themselves. Other users can attempt to withdraw, but only if the owner has given them an allowance and they haven't withdrawn before. The owner can also reset withdrawal statuses and transfer ownership of the treasure chest. This demonstrates how to create a contract with restricted access using a 'modifier' and `msg.sender`, similar to how only an admin can perform certain actions in a game or application.",
      "logicalProgression": "Introduces basic access control patterns."
    },
    {
      "day": 6,
      "week": "Week 1: Solidity Fundamentals",
      "contractName": "EtherPiggyBank.sol",
      "conceptsTaught": ["msg.sender", "address", "Ether balance", "Deposits and withdrawals"],
      "exampleApplication": "Let's make a digital piggy bank! Users can deposit and withdraw Ether (the cryptocurrency). You'll learn how to manage balances (using `address` to identify users) and track who sent Ether (using `msg.sender`). It's like a simple bank account on the blockchain, demonstrating how to handle Ether and user addresses.",
      "logicalProgression": "Applies address type, msg.sender, and Ether handling."
    },
    {
      "day": 7,
      "week": "Week 1: Solidity Fundamentals",
      "contractName": "SendSomeTokens.sol",
      "conceptsTaught": ["address", "token transfer", "payable for gas", "validation (require)"],
      "exampleApplication": "Build a contract to send tokens (digital assets) to other users. You'll learn how to transfer tokens between `address`es, understand gas fees (the cost of using the blockchain; using `payable`), and make sure everything is done correctly (using `require` for validation). It's like sending digital money to a friend, showing how to manage token transfers and handle gas.",
      "logicalProgression": "Introduces token basics and gas handling."
    },
    {
      "day": 8,
      "week": "Week 2: Intermediate Solidity",
      "contractName": "TipJar.sol",
      "conceptsTaught": ["payable", "msg.value", "Ether transfers", "simple donations"],
      "exampleApplication": "Create a digital tip jar! Users can send Ether to support a creator. You'll learn how to handle Ether payments (using `payable` and `msg.value`). Think of it like a virtual 'Buy Me a Coffee' button, demonstrating how to receive Ether payments.",
      "logicalProgression": "Deepens understanding of Ether transfers."
    },
    {
      "day": 9,
      "week": "Week 2: Intermediate Solidity",
      "contractName": "SmartCalculator.sol",
      "conceptsTaught": ["Calling functions of another contract", "address casting"],
      "exampleApplication": "Build a contract that uses another contract to do calculations. You'll learn how contracts can talk to each other by calling functions of other contracts (using `address casting`). It's like having one app ask another app to do some math, showing how to interact with other contracts.",
      "logicalProgression": "Introduces inter-contract communication."
    },
    {
      "day": 10,
      "week": "Week 2: Intermediate Solidity",
      "contractName": "ActivityTracker.sol",
      "conceptsTaught": ["Events", "logging data", "emitting events", "basic debugging"],
      "exampleApplication": "Create a contract that keeps a log of actions. You'll learn how to use 'events' to track what happens in your contract. Think of it like a fitness tracker logging your steps, demonstrating how to use events for debugging and tracking.",
      "logicalProgression": "Introduces event logging for debugging and tracking."
    },
    {
      "day": 11,
      "week": "Week 2: Intermediate Solidity",
      "contractName": "MasterKey.sol",
      "conceptsTaught": ["Ownable pattern", "modifier onlyOwner", "robust access control"],
      "exampleApplication": "Build a contract with a secure 'master key' system. Only the owner can make changes. You'll learn a standard way to control access using the 'Ownable' pattern and the `onlyOwner` modifier. It's like a digital lock with only one key, showing how to implement robust access control.",
      "logicalProgression": "Builds on basic ownership with a standard pattern."
    },
    {
      "day": 12,
      "week": "Week 2: Intermediate Solidity",
      "contractName": "MyFirstToken.sol",
      "conceptsTaught": ["ERC20 interface", "totalSupply", "balanceOf", "transfer", "token basics"],
      "exampleApplication": "Let's make your own digital currency! You'll create a basic token that can be transferred between users, implementing the ERC20 standard. It's like creating your own in-game money, demonstrating how to create and manage tokens.",
      "logicalProgression": "Introduces standardized token interfaces."
    },
    {
      "day": 13,
      "week": "Week 2: Intermediate Solidity",
      "contractName": "PreorderTokens.sol",
      "conceptsTaught": ["Selling tokens for Ether", "rate calculations", "token economics"],
      "exampleApplication": "Build a contract to sell your tokens for Ether. You'll learn how to set a price and manage sales, demonstrating token economics. It's like a pre-sale for your digital currency, showing how to sell tokens for Ether.",
      "logicalProgression": "Applies ERC20 concepts to a real-world scenario."
    },
    {
      "day": 14,
      "week": "Week 3: Advanced Solidity",
      "contractName": "SafeDepositBox.sol",
      "conceptsTaught": ["Storage patterns", "avoiding collisions", "storage layout understanding"],
      "exampleApplication": "Create a contract that stores data efficiently. You'll learn how to organize information on the blockchain to avoid storage collisions and understand storage layout. It's like building a well-organized digital storage unit, demonstrating efficient storage management.",
      "logicalProgression": "Focuses on efficient storage management."
    },
    {
      "day": 15,
      "week": "Week 3: Advanced Solidity",
      "contractName": "GasSaver.sol",
      "conceptsTaught": ["Gas optimization", "memory", "calldata", "minimizing storage"],
      "exampleApplication": "Build a contract that uses less gas (transaction fees). You'll learn how to optimize your code by using `memory`, `calldata`, and minimizing storage usage. It's like making your digital car more fuel-efficient, demonstrating gas optimization techniques.",
      "logicalProgression": "Builds on storage efficiency with gas optimization."
    },
    {
      "day": 16,
      "week": "Week 3: Advanced Solidity",
      "contractName": "PluginStore.sol",
      "conceptsTaught": ["delegatecall", "code execution context", "libraries"],
      "exampleApplication": "Create a contract that can use external code libraries. You'll learn how to add extra features to your contract using `delegatecall` and understanding code execution context. It's like adding plugins to your browser, demonstrating how to use external libraries.",
      "logicalProgression": "Introduces advanced execution control."
    },
    {
      "day": 17,
      "week": "Week 3: Advanced Solidity",
      "contractName": "UpgradeHub.sol",
      "conceptsTaught": ["Upgradeable contracts", "proxy pattern", "delegate call for upgrades"],
      "exampleApplication": "Build a contract that can be upgraded without breaking. You'll learn how to manage contract versions using the proxy pattern and `delegatecall` for upgrades. It's like updating an app without reinstalling it, demonstrating advanced contract management.",
      "logicalProgression": "Applies delegatecall to contract upgrades."
    },
    {
      "day": 18,
      "week": "Week 3: Advanced Solidity",
      "contractName": "WeatherOracle.sol",
      "conceptsTaught": ["Interacting with oracles", "fetching off-chain data"],
      "exampleApplication": "Build a contract that gets data from outside the blockchain. You'll learn how to use 'oracles' to get real-world information. It's like a contract that can check the weather, demonstrating how to integrate external data.",
      "logicalProgression": "Introduces external data integration."
    },
    {
      "day": 19,
      "week": "Week 3: Advanced Solidity",
      "contractName": "SignThis.sol",
      "conceptsTaught": ["ecrecover", "verifying signatures", "basic authentication"],
      "exampleApplication": "Build a contract that verifies digital signatures using `ecrecover`. You'll learn how to confirm someone's identity. It's like using a digital ID card, demonstrating cryptographic authentication.",
      "logicalProgression": "Introduces cryptographic authentication."
    },
    {
      "day": 20,
      "week": "Week 3: Advanced Solidity",
      "contractName": "FortKnox.sol",
      "conceptsTaught": ["Reentrancy attacks", "nonReentrant modifier", "security best practices"],
      "exampleApplication": "Build a contract that is secure from attacks, especially reentrancy attacks. You'll learn how to protect your contract from hacking using the `nonReentrant` modifier and other security best practices. It's like building a digital fort, demonstrating critical security concepts.",
      "logicalProgression": "Introduces critical security concepts."
    },
    {
      "day": 21,
      "week": "Week 4: Real-World Applications",
      "contractName": "SimpleNFT.sol",
      "conceptsTaught": ["ERC721 basics", "minting NFTs", "metadata storage"],
      "exampleApplication": "Create your own digital collectibles (NFTs)! You'll learn how to make unique digital items by implementing the ERC721 standard and storing metadata. It's like creating digital trading cards, demonstrating NFT creation.",
      "logicalProgression": "Introduces NFT standards."
    },
    {
      "day": 22,
      "week": "Week 4: Real-World Applications",
      "contractName": "DecentralizedLottery.sol",
      "conceptsTaught": ["Chainlink VRF", "random number generation", "lottery logic"],
      "exampleApplication": "Build a fair and random lottery! You'll learn how to use external services like Chainlink VRF to generate random numbers. It's like a lottery on the blockchain, demonstrating how to use external randomness.",
      "logicalProgression": "Applies external data and randomness to a practical application."
    },
    {
      "day": 23,
      "week": "Week 4: Real-World Applications",
      "contractName": "LendingPool.sol",
      "conceptsTaught": ["Lending/borrowing", "interest calculations", "collateral"],
      "exampleApplication": "Build a system for lending and borrowing digital assets. You'll learn how to calculate interest and manage collateral, demonstrating core DeFi concepts. It's like a digital bank for crypto, showing how to create lending and borrowing platforms.",
      "logicalProgression": "Introduces core DeFi concepts."
    },
    {
      "day": 24,
      "week": "Week 4: Real-World Applications",
      "contractName": "DecentralizedEscrow.sol",
      "conceptsTaught": ["Escrow service", "conditional payments", "dispute resolution"],
      "exampleApplication": "Build a secure system for holding funds until conditions are met. You'll learn how to manage payments and handle disputes. It's like a digital middleman for secure transactions, demonstrating secure conditional payments.",
      "logicalProgression": "Focuses on secure, conditional transactions."
    },
    {
      "day": 25,
      "week": "Week 4: Real-World Applications",
      "contractName": "AutomatedMarketMaker.sol",
      "conceptsTaught": ["AMM logic", "constant product formula", "liquidity pools"],
      "exampleApplication": "Build a system for trading tokens automatically. You'll learn how to create liquidity pools and implement the constant product formula, demonstrating AMM logic. It's like a digital exchange for tokens, showing how to create automated markets.",
      "logicalProgression": "Introduces advanced DeFi with AMMs."
    },
    {
      "day": 26,
      "week": "Week 4: Real-World Applications",
      "contractName": "NFTMarketplace.sol",
      "conceptsTaught": ["NFT marketplace", "listing/buying/selling", "royalties"],
      "exampleApplication": "Build a marketplace for buying and selling NFTs. You'll learn how to manage listings and royalties, demonstrating NFT trading. It's like a digital store for collectibles, showing how to create NFT marketplaces.",
      "logicalProgression": "Applies NFT standards to a marketplace."
    },
    {
      "day": 27,
      "week": "Week 4: Real-World Applications",
      "contractName": "YieldFarming.sol",
      "conceptsTaught": ["Yield farming", "staking", "reward distribution"],
      "exampleApplication": "Build a system for earning rewards by staking tokens. You'll learn how to distribute rewards, demonstrating yield farming. It's like a digital savings account with interest, showing how to create yield farming platforms.",
      "logicalProgression": "Builds on AMMs with yield farming."
    },
    {
      "day": 28,
      "week": "Week 4: Real-World Applications",
      "contractName": "DecentralizedGovernance.sol",
      "conceptsTaught": ["DAO structure", "voting", "token-based governance"],
      "exampleApplication": "Build a system for voting on proposals. You'll learn how to create a digital organization where members can vote, demonstrating decentralized governance. It's like a digital democracy, showing how to create DAOs.",
      "logicalProgression": "Introduces decentralized governance."
    },
    {
      "day": 29,
      "week": "Week 4: Real-World Applications.sol",
      "contractName": "Stablecoin",
      "conceptsTaught": ["Stablecoin implementation", "peg mechanisms", "price stability"],
      "exampleApplication": "Build a digital currency that maintains a stable value. You'll learn how to keep the price steady using peg mechanisms, demonstrating stablecoin mechanics. It's like a digital dollar, showing how to create stablecoins.",
      "logicalProgression": "Expands on DeFi with stablecoin mechanics."
    },
    {
      "day": 30,
      "week": "Week 4: Real-World Applications",
      "contractName": "MiniDex.sol",
      "conceptsTaught": ["Minimal decentralized exchange", "token swaps", "liquidity pools"],
      "exampleApplication": "Build a simple exchange for trading tokens. You'll learn how to create a digital marketplace using token swaps and liquidity pools. It's like a mini version of a stock exchange, demonstrating how to create decentralized exchanges.",
      "logicalProgression": "Combines many DeFi concepts into a practical application."
    }
  ]
}
